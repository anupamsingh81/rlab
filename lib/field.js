// module : Field & Group Theory
// 注意： 箭頭函數會自動將 this 變數綁定到其定義時所在的物件，因此以下很多地方不能用箭頭函數。
// 參考： https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions
var F = require("./set");
// F.Integer=require("./integer");
var eq = F.eq, extend=F.extend;
// ========== Group & Field Property ================
// ref:https://en.wikipedia.org/wiki/Group_(mathematics)

// 封閉性：For all a, b in G, a • b, is also in G
F.closability=function(set, op, a, b) {	return set.has(op(a,b)) }

// 結合性：For all a, b and c in G, (a • b) • c = a • (b • c).
F.associativity=function(set, op, a, b, c) {
	return eq(op(op(a,b),c), op(a,op(b,c)))
}

// 單位元素：Identity element
F.identity=function(set, op, e, a) { return eq(op(e,a),a) }

// 反元素：Inverse element
F.inversability=function(e, inv, a) {
	return eq(op(a,inv(a)),e);
}

// 交換性：
F.commutative=function(op,a,b) {
	return eq(op(a,b),op(b,a));
}

// 左分配律：
F.ldistribute=function(add, mul, a,b,c) {
	return eq(mul(a, add(b,c)), add(mul(a,b), mul(a,c)));
}

// 右分配律：
F.rdistribute=function(add, mul, a,b,c) {
	return F.ldistribute(b,c,a);
}

// 封閉性
F.isClose=function(g) {
	var a=g.random(), b=g.random();	
	return F.closability(g, a, b);
}

// 結合性
F.isAssociate=function(g) {
	var a=g.random(), b=g.random(), c=g.random();
	return F.associativity(g, g.op, a, b, c);
}

// 單位元素
F.isIdentify=function(g) {
	var a=g.random(), b=g.random(), c=g.random();
	return F.associativity(g, g.op, a, b, c);
}

// 反元素
F.isInversable=function(g) {
	var a=g.random(), b=g.random(), c=g.random();
	return F.associativity(g, g.op, a, b, c);
}

// 左分配律
F.isLeftDistribute=function(f, m, add, mul) {
	var a=f.random(), b=g.random(), c=g.random();
	return F.ldistribute(add, mul, a, b, c);
}

// 右分配律
F.isRightDistribute=function(f, m, add, mul) {
	var a=f.random(), b=f.random(), c=g.random();
	return F.rdistribute(add, mul, a, b, c);
}

// 原群
F.isMagma = function(g) {	return F.isClose(g) }

// 半群
F.isSemiGroup = function(g) {	return F.isClose(g) && F.isAssociate(g) }

// 么半群
F.isMonoid = function(g) { return F.isSemiGroup(g) && F.isIdentify(g) }

// 群
F.isGroup = function(g) { return F.isMonoid(g) && F.isInversable(g) }

// 交換群
F.isAbelGroup = function(g) {	return F.isGroup(g) && F.isCommutable(g) }

// 擬群
F.isQuasiGroup = function(g) { return F.isClose(g) && F.isInversable(g) }

// 環群
F.isLoop = function(g) { return F.isQuasiGroup(g) && F.isIdentify(g) }

// 環 ： 沒有乘法反元素的體。
F.isRing = function(f) { 
  return isAbelGroup(f.addSet) && isSemiGroup(f.mulSet);
}

// 體 ： 具有加減乘除結構的集合
F.isField = function(f) {
	return isAbelGroup(f.addSet) && isAbelGroup(f.mulSet);
}

// 模 ： 向量的抽象化
F.isModule = function(r,m) {
	return F.isRing(r)&&F.isAbelGroup(m);
//	      &&F.isLeftDistribute(r.madd, m.add); 
}

// ========== Group =================
F.SemiGroup={
  power:function(x,n) {
    var p=this.e;
    for (var i=0;i<n;i++) {
      p=this.op(p,x);
    }
    return p;
  },	
  leftCoset:function(g, H) {
    var set = new F.Set();
    for (var i in H)
      set.add(this.op(g,H[i]));
    return set;
  },
  rightCoset:function(H, g) {
    var set = new F.Set();
    for (var i in H)
      set.add(this.op(g,H[i]));
    return set;
  },
}  // 半群

F.Monoid={} // 么半群

extend(F.Monoid, F.SemiGroup)

F.Group={ 
//  inv:function(x) { return x.inv() },
}

extend(F.Group, F.Monoid);

F.AbelGroup = {} // 交換群

extend(F.AbelGroup, F.Group);

// PermutationGroup
F.PermutationGroup={
  op:function(x,y) {
    var z = [];
    for (var i in x)
      z[i] = y[x[i]];
    return z;
  },
  inv:function(x) { 
    var nx = [];
    for (var i in x) {
      nx[x[i]] = i;
    }
    return nx;
  },
}

extend(F.PermutationGroup, F.Group);

// 循環群 Cyclic Group :  a group that is generated by a single element (g)
F.CyclicGroup={
  G:[], // g:g,
  op:function(x,y) {},
  inv:function(x) {},
  create(g) {
    var t = e;
    for (var i=0; !t.eq(e); i++) {
      G[i]=t;
      t=op(g,G[i]);
    }
  }
}

extend(F.CyclicGroup, F.Group);

// NormalSubGroup : 正規子群
F.isNormalSubGroup=function(G,H,g,h) {
	return H.has(G.op(G.op(g,h), G.inv(g)));
}

// 商群 Quotent Group : aggregating similar elements of a larger group using an equivalence relation that preserves the group structure

F.QuotentGroup={
  eq:function(x,y) {},
  op:function(x,y) {},
  inv:function(x)  {},
}

extend(F.QuotentGroup, F.Group);

// Normal SubGroup : gH = Hg
// https://en.wikipedia.org/wiki/Normal_subgroup
F.NormalSubGroup={
  op:function(x,y) {},
  inv:function(x)  {},
}

extend(F.NormalSubGroup, F.Group);

// 群同構第一定理： 給定 GG和 G ′ 兩個群，和 f : G → G ′ 群同態。則 Ker ⁡ f 是一個 G 的正規子群。
// 群同構第二定理：給定群 G 、其正規子群 N、其子群 H，則 N ∩ H 是 H 的正規子群，且我們有群同構如下： H / ( H ∩ N ) ≃ H N / N
// 群同構第三定理： 給定群 G， N 和 M，M 為 G 的正規子群，滿足 M 包含於 N ，則 N / M 是 G / M 的正規子群，且有如下的群同構： ( G / M ) / ( N / M ) ≃ G / N .

// ========== Field =================
F.Ring = { // Ring  (環)  : 可能沒有乘法單位元素和反元素的 Field
  neg:function(x) { return this.addSet.inv(x) },
  add:function(x,y) { return this.addSet.op(x,y) },
  sub:function(x,y) { return this.addSet.inv(x,y) },
	mul:function(x,y) { return this.mulSet.op(x,y) },
  power:function(x,n) { return this.mulSet.power(x,n) },	
  init:function(addSet, mulSet) {
    this.addSet = addSet;
    this.mulSet = mulSet;
    this.zero = addSet.e;
	},
	// Ideal (理想): 子環，且 i·r ∈ I (左理想), r·i ∈ I (右理想)
	ideal:function(i) {}, // https://en.wikipedia.org/wiki/Ideal_(ring_theory)
}

// (F,+,*) : (F,+), (F-0,*) 均為交換群。
F.Field = {
  div:function(x,y) { return this.mulSet.op(x, this.mulSet.inv(y)) },
	inv:function(x) { return this.mulSet.inv(x) },
  init:function(addSet, mulSet) {
		F.Ring.init.call(this, addSet, mulSet);
    this.one  = mulSet.e;
  },
}

extend(F.Field, F.Ring);

// https://zh-classical.wikipedia.org/wiki/%E6%A8%A1_(%E4%BB%A3%E6%95%B8)
F.Module = F.Field;// Module(模)  : (R +) is Ring, (R × M → M)

// ========== Float Field =================
F.FloatAddGroup={
  e:0,
  op:function(x,y) { return x+y },
  inv:function(x) { return -x},
}

extend(F.FloatAddGroup, F.AbelGroup, F.Set.Float);

F.FloatMulGroup={
  e:1,
  op:function(x,y) { return x*y },
  inv:function(x) { return 1/x},
}

extend(F.FloatMulGroup, F.AbelGroup, F.Set.Float);

F.FloatField=extend({}, F.Field, F.Set.Float);

F.FloatField.init(F.FloatAddGroup, F.FloatMulGroup);

// ========== Finite Field =================
F.FiniteAddGroup={
  e:0,
  op:function(x,y) { return (x+y)%this.n },
  inv:function(x) { return (this.n-x) }
}

extend(F.FiniteAddGroup, F.AbelGroup);

F.FiniteMulGroup={
  e:1,
  op:function(x,y) { return (x*y)%this.n }, 
  inv:function(x) { return this.invMap[x] },
  setOrder:function(n) {
    this.n = n;
    let invMap = new Map();
    for (var x=1; x<n; x++) {
      var y = this.op(x,x);
      invMap.set(x,y);
    }
    this.invMap = invMap;
  }
}

extend(F.FiniteMulGroup, F.AbelGroup);

F.FiniteField=extend({}, F.Field);

F.FiniteField.create=function(n) {
  var finiteField = extend(F.Finite(n), F.FiniteField);
  var addSet = extend(F.Finite(n), {n:n}, F.FiniteAddGroup);
  var mulSet = extend(F.Finite(n), {n:n}, F.FiniteMulGroup);
  finiteField.init(addSet, mulSet);
  mulSet.setOrder(n);
  return finiteField;
}

class MathObj {
  constructor() {}
  str() { return this.toString() }
}

F.MathObj = MathObj;

// =========== Field Object ==============
class FieldObj extends MathObj {
  constructor(field) { 
    super();
    this.field = field;
    var p = Object.getPrototypeOf(this);
    p.zero = field.zero;
    p.one = field.one;
  }
  
  add(y) { return this.field.add(this,y) }
  mul(y) { return this.field.mul(this,y) }
  neg() { return this.field.neg(this) }
  inv() { return this.field.inv(this) }
  div(y) { return this.field.div(this,y) }
  sub(y) { return this.field.sub(this,y) }
  power(n) { return this.field.power(this,n) }
  isZero(x) { return this.field.isZero(this) }
  isOne(x) { return this.field.isOne(this) }
  eq(y) { return this.field.eq(this, y) }
  neq(y) { return this.field.neq(this, y) }
  mod(y) { return this.field.mod(this, y) }
  gcd(y) { return this.field.gcd(this, y) }
}

F.FieldObj = FieldObj;

// =========== Complex Field ==============
F.ComplexField=extend({}, F.Field);

class Complex extends FieldObj {
  constructor(a,b) {
    super(F.ComplexField);
    this.a = a; this.b = b; 
  }
  conj() { return new Complex(this.a, -1*this.b); }
  
  str() { 
    var op = (this.b<0)?'':'+';
    return this.a.str()+op+this.b.str()+'i';
  }
  toString() { return this.str() }
  
  toPolar() {
    var a=this.a, b=this.b, r=Math.sqrt(a*a+b*b);
    var theta = Math.acos(a/r);
    return {r:r, theta:theta}
  }
  
  power(k) {
    var p = this.toPolar();
    return Complex.polarToComplex(Math.pow(p.r,k), k*p.theta);
  }
  
  sqrt() {
    return this.power(1/2);
  }
  
  static toComplex(o) {
    if (F.isFloat(o))
      return new Complex(o, 0);
    else if (o instanceof Complex)
      return o;
    console.log('o=', o);
    throw Error('toComplex fail');
  }
  
  static polarToComplex(r,theta) {
    var a=r*Math.cos(theta), b=r*Math.sin(theta);
    return new Complex(a, b);
  }
  
  static parse(s) {
    var m = s.match(/^([^\+]*)(\+(.*))?$/);
    var a = parseFloat(m[1]);
    var b = typeof m[3]==='undefined'?1:parseFloat(m[3]);
    return new Complex(a, b)
  }
}

F.Complex = Complex;
var C = (a,b)=>new Complex(a,b);
var enumComplex=[C(1,0),C(0,1),C(0,0),C(2,3),C(-5,4),C(-10,-7)];
F.ComplexSet=new F.Set(enumComplex);
F.ComplexSet.has = (a)=>a instanceof Complex;

F.ComplexAddGroup={
  e:new Complex(0,0),
  op:function(x,y) { 
    x = Complex.toComplex(x), y=Complex.toComplex(y);
    return new Complex(x.a+y.a, x.b+y.b) 
  },
  inv:function(x) { 
    x = Complex.toComplex(x);
    return new Complex(-x.a, -x.b) 
  }
}

extend(F.ComplexAddGroup, F.AbelGroup, F.ComplexSet);

F.ComplexMulGroup={
  e:new Complex(1,0),
  op:function(x,y) {
    x = Complex.toComplex(x), y=Complex.toComplex(y);
    return new Complex(x.a*y.a-x.b*y.b, x.a*y.b+x.b*y.a);
  },
  inv:function(x) {
    x = Complex.toComplex(x);
    var a=x.a,b=x.b, r=(a*a+b*b);
    return new Complex(a/r, b/r);
  } 
}

extend(F.ComplexMulGroup, F.AbelGroup, F.ComplexSet);

extend(F.ComplexField, F.ComplexSet);

F.ComplexField.init(F.ComplexAddGroup, F.ComplexMulGroup);

// =========== Ratio Field ==============
F.RatioField=extend({}, F.Field);

class Ratio extends FieldObj {
  constructor(a,b) {
    super(F.RatioField);
    this.a = a; this.b = b; 
  }

  reduce() {
    var a = this.a, b=this.b;
    var c = F.gcd(a, b);
    return new Ratio(a/c, b/c);
  }
  
  toString() { return this.a+'/'+this.b; }

  static parse(s) {
    var m = s.match(/^(\d+)(\/(\d+))?$/);
    var a = parseInt(m[1]);
    var b = typeof m[3]==='undefined'?1:parseInt(m[3]);
    return new Ratio(a, b)
  } 
}

F.Ratio = Ratio;

F.RatioAddGroup={
  e:new Ratio(0,1),
  op:function(x,y) { return new Ratio(x.a*y.b+x.b*y.a, x.b*y.b) },
  inv:function(x) { return new Ratio(-x.a, x.b); },
}
  
extend(F.RatioAddGroup, F.AbelGroup);

F.RatioMulGroup={
  e:new Ratio(1,1),
  op:function(x,y) { return new Ratio(x.a*y.a, x.b*y.b) },
  inv:function(x) { return new Ratio(x.b, x.a) },
}

extend(F.RatioMulGroup, F.AbelGroup);

F.RatioField.init(F.RatioAddGroup, F.RatioMulGroup);

// =========== Function Operation ==============
F.fneg=function(fx) { return function(v) {
  return -1*fx(v);
}}

F.finv=function(fx) { return function(v) {
  return 1/fx(v);
}}

F.fadd=function(fx,fy) { return function(v) {
  return fx(v).add(fy(v));
}}

F.fsub=function(fx,fy) { return function(v) {
  return fx(v).sub(fy(v));
}}

F.fmul=function(fx,fy) { return function(v) {
  return fx(v).mul(fy(v));
}}

F.fdiv=function(fx,fy) { return function(v) {
  return fx(v).div(fy(v));
}}

F.fcompose=function(fx,fy) { return function(v) {
  return fx(fy(v));
}}

F.feval=function(f,x) { return f(x) }

// f=(x,y)=>x*y+x*x;
// f0=fa(f); f0([x,y]);
F.fa=function(f) {
  return function(x) {
    return f.apply(null, x);
  }
}

// =========== Function Field ==============
F.FunctionField=extend({}, F.Field);

F.FunctionAddGroup={
  e:function(x) { return 0 },
  op:function(x,y) { return F.fadd(x,y) },
  inv:function(x) { return F.fneg(x) },
}
  
extend(F.FunctionAddGroup, F.AbelGroup);

F.FunctionMulGroup={
  e:function(x) { return f(x) },
  op:function(x,y) { return F.fsub(x,y) },
  inv:function(x) { return F.finv(x) },
}

extend(F.FunctionMulGroup, F.AbelGroup);

F.FunctionField.init(F.FunctionAddGroup, F.FunctionMulGroup);

// =========== Topological Ring ==============
F.TopologicalRing = extend({}, F.Ring);
F.TopologicalField = extend({}, F.Field);

// Function
F.isField=function(x) {
  return F.isBool(x) || F.isNumber(x) || x instanceof F.FieldObj;
}

// ref : https://en.wikipedia.org/wiki/Group_homomorphism
//  https://en.wikipedia.org/wiki/Fundamental_theorem_on_homomorphisms
// 同態：h(a • b) = h(a) x h(b) 
F.homomorphism=function(h, g1, g2) {
  var a=g1.random(), b=g2.random();
  return eq(h(group1.op(a,b)), group2.op(h(a), h(b)))
}

// ref : https://en.wikipedia.org/wiki/Isomorphism
//  https://en.wikipedia.org/wiki/Isomorphism_theorem
// 同構：h(a • b) = h(a) • h(b)
F.isomorphism=function(h1, h2, g1, g2) {
  var a1=g1.random(), b1=g2.random();
  var a2=g1.random(), b2=g2.random();
  return homorphism(h1,g1,g2)&&homorphism(h2,g2,g1);
}

module.exports = F;

